List (t: Type) : Type
  Cons <t: Type> (head: t) (tail: List t) : List t
  Nil <t: Type> : List t

Tree (t: Type) : Type
  Empty <t: Type> : Tree t
  Single <t: Type> (value: t) : Tree t
  Concat <t: Type> (left: Tree t) (right: Tree t) : Tree t

// Generates a random list
Randoms (s: U60) (n: U60) : List U60
Randoms s 0 = Nil
Randoms s l = Cons s (Randoms (% (+ (* s 1664525) 1013904223) 4294967296) (- l 1))

// Sums all elements in a concatenation tree
Sum (tree: Tree U60) : U60
Sum (Empty t)      = 0
Sum (Single t a)   = a
Sum (Concat t a b) = (+ (Sum a) (Sum b))

// TODO ......

//// The initial pivot
//Pivot = 2147483648

//// QuickSort
//(QSort p s Nil)          = Empty
//(QSort p s (Cons x Nil)) = (Single x)
//(QSort p s (Cons x xs))  =
  //(Split p s (Cons x xs) Nil Nil)

//// Splits list in two partitions
//(Split p s Nil min max) =
  //let s   = (>> s 1)
  //let min = (QSort (- p s) s min)
  //let max = (QSort (+ p s) s max)
  //(Concat min max)
//(Split p s (Cons x xs) min max) =
  //(Place p s (< p x) x xs min max)

//// Moves element to its partition
//(Place p s 0 x xs min max) =
  //(Split p s xs (Cons x min) max)
//(Place p s 1 x xs min max) =
  //(Split p s xs min (Cons x max))

//// Sorts and sums n random numbers
//(Main n) =
  //let list = (Randoms 1 (* 100000 n))
  //(Sum (QSort Pivot Pivot list))
